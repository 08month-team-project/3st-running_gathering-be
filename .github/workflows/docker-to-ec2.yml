name: Java CD with ec2

on:
  push:
    branches: [ "dev" ]

jobs:
  build-docker-image:

    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    # 권한 삭제
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Spring Boot 어플리케이션 Build
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

      # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/runto-cicd .

      # DockerHub Login (push 하기 위해)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/runto-cicd

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/runto-cicd

      - name: docker stop container
        run: |
          if [ $(sudo docker ps -a -q -f "publish=8080" -f "status=running") ]; then
            sudo docker stop $(sudo docker ps -q -f "publish=8080 " -f "status=running")
          fi

      - name: docker run new container
        run: |
          sudo docker run --rm -d -p 8080:8080 \
          -e SPRING_PROFILES_ACTIVE=prod \
          -e "AWS_DB_DRIVER=${{ secrets.AWS_DB_DRIVER }}" \
          -e "AWS_DB_URL=${{ secrets.AWS_DB_URL }}" \
          -e "AWS_DB_USERNAME=${{ secrets.AWS_DB_USERNAME }}" \
          -e "AWS_DB_PASSWORD=${{ secrets.AWS_DB_PASSWORD }}" \
          -e "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          -e "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" \
          -e "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" \
          -e "BUCKET=${{ secrets.BUCKET }}" \
          -e "STATIC_REGION=${{ secrets.STATIC_REGION }}" \
          -e "SERVICE_ID=${{ secrets.SERVICE_ID }}" \
          -e "SERVICE_SECRET=${{ secrets.SERVICE_SECRET }}" \
          -e "SERVICE_REDIRECT_URL=${{ secrets.SERVICE_REDIRECT_URL }}" \
          -e "SERVICE_AUTH_GRANT_TYPE=${{ secrets.SERVICE_AUTH_GRANT_TYPE }}" \
          -e "SERVICE_SCOPE=${{ secrets.SERVICE_SCOPE }}" \
          -e "SERVICE_AUTH_URL=${{ secrets.SERVICE_AUTH_URL }}" \
          -e "SERVICE_TOKEN_URL=${{ secrets.SERVICE_TOKEN_URL }}" \
          -e "SERVICE_USER_INFO_URL=${{ secrets.SERVICE_USER_INFO_URL }}" \
          -e "SERVICE_USER_ATTRIBUTE=${{ secrets.SERVICE_USER_ATTRIBUTE }}" \
          ${{ secrets.DOCKERHUB_USERNAME }}/runto-cicd:latest

      - name: delete old docker image
        run: sudo docker system prune -f
